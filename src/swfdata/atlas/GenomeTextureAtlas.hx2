package swfdata.atlas;

import openfl.display.BitmapData;
import openfl.geom.Rectangle;
import swfdata.atlas.ITexture;
import swfdata.atlas.ITextureAtlas;
import swfdata.atlas.TextureTransform;

import com.genome2d.textures.GTextureBase;
import com.genome2d.textures.GTextureManager;

import swfdata.SwfdataInner;

class GenomeTextureAtlas implements ITextureAtlas
{
    public var padding(get, set) : Float;
	
    public var gTextureAtlas : GTexture;
    public var atlasData : BitmapData;
    public var disposed : Bool = false;
    
    public var gpuMemorySize : Float = 0;
    
    private var subTextures : Dynamic = { };
    
    private var _padding : Float = 0;
    
    public function new(id : String, atlasData : BitmapData, format : String, padding : Float = 0)
    {
        this.atlasData = atlasData;
        this._padding = padding;
        
        gTextureAtlas = GTextureManager.createTexture(id, atlasData, 1, false, format);
        gpuMemorySize = calculateGPUSize(format, atlasData.width, atlasData.height);
    }
    
    private function calculateGPUSize(format : String, nativeWidth : Int, nativeHeight : Int) : Float
    {
        var pixelsCount : Float = nativeWidth * nativeHeight;
        
        var bytesPerPixel : Int = 4;
        
        /*if (format == Context3DTextureFormat.BGRA) 
            bytesPerPixel = 4
        else if (format == Context3DTextureFormat.BGR_PACKED || format == Context3DTextureFormat.BGRA_PACKED) 
            bytesPerPixel = 2
        else if (format == Context3DTextureFormat.COMPRESSED || format == Context3DTextureFormat.COMPRESSED_ALPHA) 
            bytesPerPixel = 2
        else if (format == Context3DTextureFormat.RGBA_HALF_FLOAT) 
            bytesPerPixel = 8;*/
        
        return (bytesPerPixel * pixelsCount) / 1048576;
    }
    
    public function reupload() : Void
    {
        gTextureAtlas.invalidateNativeTexture(true);
    }
    
    public function createSubTexture(id : Int, region : Rectangle, transformX : Float, transformY : Float) : Void
    {
        var subTeture : GenomeSubTexture = new GenomeSubTexture(id, region, new TextureTransform(transformX, transformY), gTextureAtlas);
        
        putTexture(subTeture);
    }
    
    /**
		 * @inheritDoc
		 */
    public function getTexture(textureId : Int) : ITexture
    {
        return subTextures[textureId];
    }
    
    /**
		 * @inheritDoc
		 */
    public function putTexture(texture : ITexture) : Void
    {
        subTextures[texture.id] = texture;
    }
    
    public function dispose(disposeSource : Bool = false) : Void
    {
        disposed = true;
        gTextureAtlas.dispose(disposeSource);
    }
    
    private function get_padding() : Float
    {
        return _padding;
    }
    
    private function set_padding(value : Float) : Float
    {
        _padding = value;
        return value;
    }
}

